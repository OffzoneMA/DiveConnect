const userModel = require('../models/userModel');

exports.registerUser = async (userData) => {
  const hashedPassword = await bcrypt.hash(userData.password, 10);
  const user = new userModel({ ...userData, password: hashedPassword });
  return user.save();
};

exports.loginUser = async (email) => {
  const user = await userModel.findOne({ email });
  if (!user) return null;
  const isMatch = await bcrypt.compare(user.password, user.password);
  if (!isMatch) return null;
  const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
  return { user, token };
};

exports.getUserProfile = async (userId) => {
  const user = await userModel.findById(userId).select('-password');
  return user;
};

exports.updateUserProfile = async (userId, userData) => {
  const updatedUser = await userModel.findByIdAndUpdate(userId, userData, { new: true });
  return updatedUser;
};

exports.deleteUserAccount = async (userId) => {
  await userModel.findByIdAndDelete(userId);
};